#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};


class Solution
{
    public:
    bool checkBSTleft(Node* root,int m1)
    {
        if(root==NULL)
        {
            return true;
        }
        if(root->left==NULL && root->right==NULL && root->data<m1)
        {
            return true;
            
        }
        if(root->data>=m1)
        {
            return false;
        }
        
        m1=max(m1,root->data);
        return checkBSTleft(root->left,m1) && checkBSTleft(root->right,m1);
        
        
    }
                                                                   
    bool checkBSTright(Node* root,int m1)                            
    {                                                       
        if(root==NULL)
        {
            return true;
        }
        if(root->left==NULL && root->right==NULL && root->data>m1)
        {
            return true;
            
        }
        if(root->data<=m1)
        {
            return false;
        }
        
        m1=min(m1,root->data);
        return checkBSTright(root->left,m1) && checkBSTright(root->right,m1);
        
        
    }

    
    bool isBST(Node* root) 
    {
        int m1,m2;
        if(root==NULL || root->left==NULL && root->right==NULL)
        {
            return true;
        }
        return checkBSTleft(root->left,root->data) && checkBSTright(root->right,root->data);
        
    }
};




Node* buildTree(string str)
{
   if(str.length() == 0 || str[0] == 'N')
       return NULL;

  vector<string> ip;

   istringstream iss(str);
   for(string str; iss >> str; )
       ip.push_back(str);

   Node* root = new Node(stoi(ip[0]));

   queue<Node*> queue;
   queue.push(root);

   int i = 1;
   while(!queue.empty() && i < ip.size()) {

       Node* currNode = queue.front();
       queue.pop();

       string currVal = ip[i];


       if(currVal != "N") {


           currNode->left = new Node(stoi(currVal));


           queue.push(currNode->left);
       }


       i++;
       if(i >= ip.size())
           break;
       currVal = ip[i];

       if(currVal != "N") {


           currNode->right = new Node(stoi(currVal));

           queue.push(currNode->right);
       }
       i++;
   }

   return root;
}

void inorder(Node *root, vector<int> &v)
{
    if(root==NULL)
        return;

    inorder(root->left, v);
    v.push_back(root->data);
    inorder(root->right, v);
}

int main() {
 
   int t;
   string tc;
   getline(cin, tc);
   t=stoi(tc);
   while(t--)
   {
    string s; 
    getline(cin, s);
    Node* root = buildTree(s);
    Solution ob;
    if(ob.isBST(root)) 
        cout<<"1\n";
        
    else
        cout<<"0\n";
   }
   return 0;
}

